from django.db import models
from category.models import Category
from account.models import UserProfile

# Create your models here.


class Recipe(models.Model):
    # Not creating recipe_id as a default id field will be generated by Django
    user_profile = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
    title = models.CharField(max_length=100)
    origin = models.CharField(max_length=100)
    category_id = models.ForeignKey(Category, on_delete=models.CASCADE)
    ingredients = models.TextField()
    description = models.TextField()

    preparation_time = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True, blank=True)
    image = models.ImageField(
        upload_to="images/recipes", default="images/recipes/default.jpeg"
    )

    # No cascading delete when rating is deleted. This is because
    # a recipe might exist without any rating, especially when it's a new recipe.
    # rating_id = models.ForeignKey("account.Rating", on_delete=models.DO_NOTHING)

    average_rating = models.SmallIntegerField(default=0)

    def __str__(self):
        return f"{self.title}"


class SavedRecipe(models.Model):
    # Not creating saved_id as Django automatically adds an id field.
    user_profile = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
    recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE)
    saved_at = models.DateTimeField(auto_now_add=True, blank=True)

    def __str__(self):
        return (
            f"SavedRecipe:Recipe={self.recipe} saved by UserProfile={self.user_profile}"
        )


class Rating(models.Model):
    # Not creating rating_id as Django automatically adds an id field.
    recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE)
    user_profile = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
    rating = models.SmallIntegerField(default=0)

    def __str__(self):
        return f"Recipe='{self.recipe}' Rating='{self.rating}' Username='{self.user_profile}'"
